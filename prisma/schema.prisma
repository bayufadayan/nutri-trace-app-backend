// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================
// ENUMS
// =====================
enum Role {
  SUPERADMIN
  PRODUCER
  DISTRIBUTOR
  NUTRITIONIST
}

enum BatchStatus {
  PENDING
  DELIVERED
  REJECTED
}

enum DistributionStatus {
  IN_TRANSIT
  DELIVERED
}

enum ProductStatus {
  PENDING
  NEED_APPROVAL
  READY_FOR_DISTRIBUTION
  DISTRIBUTED
}

// =====================
// MODELS
// =====================

// USER — semua akun resmi
model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  role         Role
  profileImage String?
  createdAt    DateTime @default(now())
  refreshToken String?

  // Relasi
  batches        Batch[]              @relation("ProducerBatches")
  products       Product[]            @relation("NutritionistProducts")
  distributions  Distribution[]
  aiExplanations AIAgentExplanation[]
}

// BATCH — bahan mentah yang diinput produsen
model Batch {
  id           String      @id @default(uuid())
  producerId   String
  materialName String
  weight       Float
  createdAt    DateTime    @default(now())
  qrCode       String?
  status       BatchStatus @default(PENDING)

  // Relasi
  producer      User           @relation("ProducerBatches", fields: [producerId], references: [id])
  distributions Distribution[]
  products      ProductBatch[]
}

// DISTRIBUTION — pengiriman batch
model Distribution {
  id           String             @id @default(uuid())
  batchId      String
  driverName   String
  truckId      String
  fromLocation String
  toLocation   String
  sentAt       DateTime
  receivedAt   DateTime?
  status       DistributionStatus @default(IN_TRANSIT)

  batch  Batch   @relation(fields: [batchId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

// PRODUCT — makanan akhir yang dibuat nutritionist
model Product {
  id          String        @id @default(uuid())
  nutritionId String
  name        String
  qrCode      String?
  status      ProductStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  userId      String?
  chefName    String?

  user           User?                @relation("NutritionistProducts", fields: [userId], references: [id])
  nutrition      Nutrition?           @relation(fields: [nutritionId], references: [id])
  batches        ProductBatch[]
  aiExplanations AIAgentExplanation[]
}

// NUTRITION — data gizi makanan akhir
model Nutrition {
  id       String  @id @default(uuid())
  calories Float
  protein  Float
  fat      Float
  carbs    Float
  vitamins String?

  product   Product[]
}

// Junction table Product ↔ Batch
model ProductBatch {
  id        String @id @default(uuid())
  productId String
  batchId   String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  batch   Batch   @relation(fields: [batchId], references: [id])
}

// AI AGENT EXPLANATION — hasil generate AI
model AIAgentExplanation {
  id            String   @id @default(uuid())
  userId        String
  productId     String
  generatedText String
  createdAt     DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
