// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================
// ENUMS
// =====================
enum Role {
  SUPERADMIN
  SUPPLIER
  DISTRIBUTOR
  NUTRITIONIST
}

// =====================
// MODELS
// =====================

// USER — semua akun yang terdaftar & punya peran resmi
model User {
  id             Int     @id @default(autoincrement())
  name           String
  email          String  @unique
  password       String
  role           Role
  profileImage   String?
  createdAt      DateTime @default(now())

  refreshToken   String?   // <- tambahkan ini
  products       Product[] @relation("SupplierProducts")
  shipments      SupplyChainLog[] @relation("UserShipments")
  aiExplanations AIAgentExplanation[]
}

// PRODUCT — representasi produk mentah maupun hasil akhir
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  imageUrl    String?
  supplierId  Int
  supplier    User     @relation("SupplierProducts", fields: [supplierId], references: [id])
  createdAt   DateTime @default(now())

  // Relations
  batches        Batch[]
  certifications Certification[]
  nutrition      Nutrition?
  aiExplanations AIAgentExplanation[]
}

model Batch {
  id        Int      @id @default(autoincrement())
  traceCode String   @unique
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  imageUrl  String?
  // Relasi ke log pengiriman
  logs SupplyChainLog[]
}

// SUPPLY CHAIN LOG — mencatat perjalanan batch dari supplier ke lokasi akhir
model SupplyChainLog {
  id        Int      @id @default(autoincrement())
  batchId   Int
  userId    Int
  action    String
  timestamp DateTime @default(now())
  location  String?
  imageUrl  String? // foto bukti pengiriman (misal foto truk, tanda terima, lokasi drop-off)

  batch Batch @relation(fields: [batchId], references: [id])
  user  User  @relation("UserShipments", fields: [userId], references: [id])
}

// NUTRITION — data gizi produk akhir
model Nutrition {
  id        Int     @id @default(autoincrement())
  productId Int     @unique
  calories  Float
  protein   Float
  fat       Float
  carbs     Float
  vitamins  String?

  product Product @relation(fields: [productId], references: [id])
}

// CERTIFICATION — bukti keamanan atau mutu produk
model Certification {
  id         Int      @id @default(autoincrement())
  productId  Int
  certType   String
  issuedBy   String
  issuedDate DateTime

  product Product @relation(fields: [productId], references: [id])
}

// AI AGENT EXPLANATION — hasil generate dari AI (IBM Granite)
model AIAgentExplanation {
  id            Int      @id @default(autoincrement())
  userId        Int
  productId     Int
  generatedText String
  createdAt     DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
